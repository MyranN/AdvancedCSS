.row {
  /*
    Max-width specifies the maximum width an element can be provided the current
    viewport width is large enough. If the current viewport width is smaller than
    the max-width, then the element takes up the entire width available.
   */
  max-width: $grid-width; //Typical standard default width is 1140px. Equates to 114rem.

  /*
    Trick to center a block element inside of another block element. Here we're
    saying the top and bottom margins are 0 and the left and right margins are
    'auto'. This works because the browser is left to render the left and right
    margins. As they are both 'auto' the browser sets both left and right margins
    to the same value. This forces the element to the middle.
   */
  margin: 0 auto;

  /*
    Using the 'not' function to say apply to all except the last element. The 'not' function
    takes a pseudo class as an argument.
   */
  &:not(:last-child) {
    margin-bottom: $gutter-vertical; //Leave vertical spacing between rows except last element/row
  }

  @include clearfix;

  /*
    This is an 'attribute' selector. E.g if you had html such as <img src="a">
    Then you could select all elements that had a 'src' attribute with the following:
      [src="a"] {...}
    The '^' symbol says give me all elements with attributes that START WITH whatever
    is specified. E.g. if you had html such as <img src="a_monkey_sat">. Then you
    could select all elements that had a 'src' attribute that started with "a_monkey"
    with the following:
      [src=^="a_monkey"] {...}

    = == EQUAL
    ^ == STARTS WITH
    * == CONTAINS
    $ == ENDS WITH

    Here, we're selecting all elements that have a class starting with 'col-'. I.e.
    all the columns.
   */
  [class^="col-"] {

    /*
      All columns are floated to the left to create a sequence. However, this means
      that the parent 'row' element has a height of 0px (because all the child elements
      are floated). Therefore the 'clearfix' hack needs to be applied in order to
      view the vertical margin of the row defined above ($gutter-vertical).
      See line 27 for the clearfix hack being included. It is defined in the _mixins
      .scss file.
     */
    float: left;

    /*
      Here we're saying that each column in the row except the last should have margin
      attached to the right(defined as the $gutter-horizontal in our case).
     */
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    /*
      The calc function allows you to perform calculations on mixed units. E.g.
      calculations with pixels and rem etc. These calculations take place while
      the page is rendered using the formatting model as that is when the measurements
      are truly known (rems, percentages etc.) for a layout.

      If using variables ($gutter-horizontal) in your calc function, then you need
      to wrap it in '#{ myVariable }' as below.

      The calculation is saying take 100% width of the parent element and subtract
      the space. This gives you the length of 2 columns separated by the middle margin
      or gutter. Then divide by 2 to get each column width.
        [------------100%------------]
        [--col 1--][gutter][--col 2--]
     */
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    /*
      The below provides the following layout col widths.
      [---------------------100%----------------------]
      [--col 1--][gutter][--col 2--][gutter][--col 3--]
     */
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  /*
    The below provides the following layout col widths.
    [--------------------100%-----------------------]
    [--col 1--][gutter][--col 1--][gutter][--col 1--]
    [--col 1--][gutter][----------col 2-------------]
   */
  .col-2-of-3 {
    //2 * col-1-of-2 + horizontal gutter
    width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-2-of-4 {
    //2 * col-1-of-4 + horizontal gutter
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    //(3 * col-1-of-4) + (2 * horizontal gutter)
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }
}
/*
  _form.scss holds the Sass code related to the booking form. It belongs to the
   'component' directory as it is a reusable and independent.
*/

.form {

  &__group {
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;
    /*
      Input elements don't inherit font properties so
      we set it to inherit automatically.
     */
    font-family: inherit;
    color: inherit;

    padding: 1.5rem 2rem; //always give more on the sides for inputs
    border-radius: 2px;
    background-color: rgba($color-white, .5);
    border: none;
    //added to ensure resize doesn't happen when focussed
    border-bottom: 3px solid transparent;
    width: 90%;
    display: block;
    transition: all .3s;

    /*
    A pseudo element (represented by 2 colons). They represent
    things that are actually on the webpage.
   */
    &::-webkit-input-placeholder {
      color: $color-grey-dark-2
    }

    &:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, .1);
      border-bottom: 3px solid $color-primary;

      &:invalid {//invalid pseudo class on focussed element
        border-bottom: 3px solid $color-secondary-dark
      }
    }

    @include respond(tab-port) {
      width: 100%;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: .7rem;
    display: block;
    transition: all .3s;
  }

  /*
    Styling on the label element when the input placeholder is
    shown. The label is an adjacent sibling element of the
    input element. By 'adjacent' we mean an element that
    appears immediately after.
    There are 2 sibling selectors.
      ~ == general sibling selector. I.e. selects any sibling
           of the current element.
      + == adjacent sibling selector

     IMPORTANT: You can only select siblings that appear after
     the current element. From the current element it is NOT
     possible to select previous sibling elements in the HTML.
   */
  &__input:placeholder-shown + &__label {
    opacity: 0; //opacity is required for the animation
    visibility: hidden; //this hides the element but can't animate on it.
    transform: translateY(-4rem); //initial state of label when the placeholder is visible.
  }

  &__radio-group {
    width: 49%;
    display: inline-block;

    @include respond(tab-port) {
      width: 100%;
      margin-bottom: 2rem;
    }
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem;
  }

  /*
    The custom radio button
   */
  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    display: inline-block;
    position: absolute; //use positioning to set position of button.
    left: 0;
    top: -.4rem;

    &::after { //after pseudo element to be the inner circle on selection
      content: "";
      display: block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: $color-primary;
      opacity: 0; //make sure inner circle is blank initially. i.e. unselected.
    }
  }

  /*
    Use the checked pseudo class available to all radio buttons to determine
    whether the custom button should have the inner circles displayed, i.e.
    selected.
    The selector below first selects the radio button once in a checked
    state. It then selects the sibling element, i.e. the radio-label and
    finally it selects the child, i.e. the span elements 'after' state
    aka our custom radio button 'after' state defined on line 104.
   */
  &__radio-input:checked ~ &__radio-label &__radio-button:after {
    opacity: 1;
  }

  &__radio-input {
    display: none; //hide the original radio button.
  }
}
/*
  _cards.scss is the Sass code responsible for the rotating cards displayed in the
  'Tours' section. It is a self contained reusable component. It therefore belongs to
  the 'components' directory.
 */

.card {

  /*
    The perspective property is an effect to make the element appear to move closer to
    you, in this case during rotation. The lower the perspective the more dramatic the
    effect.
   */
  perspective: 150rem;
  -moz-perspective: 150rem; //Required for Firefox

  position: relative;

  /*
    Because absolute positioning was used in the child elements, this took
    the child elements out of the natural flow. The parent, in this case the
    element with class 'card' collapses to having a 0 height. This is similar
    to what happens when using floats.
    However, whereas with floats, the clearfix hack can be used, with absolute
    positioning, this cannot be done. So we simply specify the height to be the
    same as the child elements.
   */
  height: 52rem;

  &__side {
    font-size: 2rem;

    height: 52rem;
    transition: all .8s ease; //'ease' is a timing function for smoother animation.
    position: absolute;
    top: 0;
    left: 0;

    /*
      By specifying positioning properties, the width is adjusted to the size
      of the content. However, we want the width of the card to take up the
      entire container.
     */
    width: 100%;

    /*
      Hides the back of an element. I.e. during rotation or some transformation.
      Without it, you would see the element as though from the back, i.e, the
      content of the element would be flipped as though in a mirror. You can
      test this by simply viewing text within a div and rotating the div.
     */
    backface-visibility: hidden;

    border-radius: 3px;
    box-shadow: 0 1.5rem 4rem rgba($color-black, .15);

    /*
      Set overflow to hidden so that when the image is placed
      on the card (see line 118), it does not hide the rounded edges.
     */
    overflow: hidden;

    &--front {
      background-color: $color-white;
    }

    /*
      The back of the card is already set to 180deg. Therefore when you
      hover over the card, only the front of the card needs to rotate
      180deg.
     */
    &--back {
      transform: rotateY(180deg);

      &--1 {
        background-image: linear-gradient(to right bottom, $color-secondary-light, $color-secondary-dark);
      }

      &--2 {
        background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark);
      }

      &--3 {
        background-image: linear-gradient(to right bottom, $color-tertiary-light, $color-tertiary-dark);
      }
    }
  }

  /*
    When hovering over the card, then the card__side element should
    be transformed, in this case rotated. We don't want to transform
    on the hover alone because we may want to perform other actions
    based on other classes, not just card__side. In our case, we want
    to do different things based on the front and back.
   */
  &:hover &__side--front{
    //rotates the card -180 degrees in the y-axis, i.e the opposite direction
    transform: rotateY(-180deg);
  }

  /*
   The back of the card is already rotated at 180degrees by default.
   Therefore when we hover over it, we want it to rotate back to 0deg.
   This ensures that the front and back are opposite at any given time.
   I.e. start: back  = 180deg rotated.
               front = 0deg rotated.
        hover: back  = 0deg rotated.
               front = 180deg rotated.
   */
  &:hover &__side--back{
    transform: rotateY(0);
  }

  /*
    The sass code below is for the Front side styling
   */
  &__picture {
    background-size: cover;
    height: 23rem;
    //blending type to blend the img with the linear gradient below.
    background-blend-mode: screen;

    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

    &--1 {
      /*
        Assumes this sass becomes the main.css file, therefore go up one
        directory for img folder.
        Also blending the image with a linear gradient. This can only be
        done with a background-image. Hence why we're not just using the
        <img> element in the html.
       */
      background-image: linear-gradient(to right bottom, $color-secondary-light, $color-secondary-dark),
                        url(../img/nat-5.jpg);
    }

    &--2 {
      background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark),
                        url(../img/nat-6.jpg);
    }

    &--3 {
      background-image: linear-gradient(to right bottom, $color-tertiary-light, $color-tertiary-dark),
                        url(../img/nat-7.jpg);
    }
  }

  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: $color-white;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
  }

  &__heading-span {
    padding: 1rem 1.5rem; //forces the text to be split across multiple lines
    /*
      splits an inline block spread across multiple lines into separate
      blocks, where line has it's own block. The 'clone' setting applies
      the styles of the selector to each separate block rather than to
      the original single inline block.
     */
    -webkit-box-decoration-break: clone;

    &--1 {
      background-image: linear-gradient(to right bottom,
              rgba($color-secondary-light, .85),
              rgba($color-secondary-dark, .85)
      );
    }

    &--2 {
      background-image: linear-gradient(to right bottom,
              rgba($color-primary-light, .85),
              rgba($color-primary-dark, .85)
      );
    }

    &--3 {
      background-image: linear-gradient(to right bottom,
              rgba($color-tertiary-light, .85),
              rgba($color-tertiary-dark, .85)
      );
    }
  }

  &__details {
    padding: 3rem;

    ul {
      list-style: none;
      width: 80%; //don't want to occupy the entire width
      margin: 0 auto; //automatically center an element in another element.

      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

          &:not(:last-child) {
            border-bottom: 1px solid $color-grey-light-2;
          }
      }
    }
  }
}
* {
    margin: 0;
    padding: 0;
}

$color-primary: #f9ed69; //Custom variable yellow
$color-secondary: #f08a5d; //Custom variable orange
$color-tertiary: #b83b5e; //Custom variable pink
$color-text-dark: #333; //Custom variable grey
$color-text-light: #eee; //Custom variable grey

$width-button: 150px;

/*
    A mixin is a reusable bit of css code. For example, the clearfix
    mixin can now be declared as below and simply referenced everywhere
    that is required. This avoids having to write out the clearfix selector
    in every element. A simple reference will no suffice.

    To use a mixin, enter where required (see line 62):
        @include myMixin;

    Remember a mixin must be defined in a sass/less file before it can
    be used. If the mixin is declared at line 10 and used at line 5, it
    will not work.
 */
@mixin clearfixmixin {

    /*
        Typically the clearfix hack is used when a 'floating' element is
        taller than the element containing it. You can then specify
        'overflow:auto' to the containing element to fix this.

        (See line 105 for reasoning behind usage of '&').
    */
    &.clearfix {
        content: "";
        overflow: auto;
    }
}

/*
    It is also possible to pass arguments into a mixin. The mixin can
    then use the passed in variable. This is useful when trying to
    remove duplicate css code but vary slightly. In cases such as this
    the user of the mixin can provide the differing values while the mixin
    keeps the bulk of the code the same.

    Below is an example of a mixin that takes in a single parameter.
    (See lines 121 and 151 for usages).
 */
@mixin style-link-text($color) {
    text-decoration: none;
    text-transform: uppercase;
    color: $color; //using the passed in argument.
}   

nav {
    margin: 30px;
    background-color: $color-primary;

    @include clearfixmixin; //usage of a mixin
}

/*
    Without Sass, in order to style the list items in an element
    a new selector would be needed. E.g.

        .navigation li {
            //stylings
        }

    However, with Sass, you can nest the css selectors as you would
    the elements themselves. Notice below, that the li element is
    nested inside the .navigation selector. You can confirm by
    looking at the css file that gets compiled from the sass file.

    There's no limit to the nesting. For example in order to select
    the last/first child of an element, you could use the following:

        li: last-child {
            margin: 0;
        }

    With Sass, you can nest the 'last-child' selector in the 'li'
    selector already created, which itself is nested inside the
    'navigation' selector.
 */
.navigation {
    list-style: none;
    float: left; //float allows an element to move to specified direction
                 //of its container. In this case left.

    /*  clear specifies whether an element can float next to it.
        In this case, elements can float left and/or right of
        this one.
    */
    //clear: both;

    li { //nested selector
        display: inline-block;
        margin-left: 30px;

        /*
            The '&' gets replaced with the selector up until this point.
            In this case, it will be '.navigation li'. The rest is appended
            to give
                '.navigation li:first-child'
            The '&' is required when there should be no space separation
            in the selector. E.g. without the '&', you would have
                '.navigation li :first-child'.
            Note the space between 'li' and ':first-child'. This does
            not work.
        */
        &:first-child {
            margin: 0;
        }

        a {
            //use a mixin and pass in the color to be used
            @include style-link-text($color-text-dark);
        }
    }
}

.buttons {
    float: right;
}

/*
    Example of a function. It is similar to a mixin in that it takes
    any number of arguments. However the function returns a value.
    The function below simply divides the two passed in arguments. Its
    usage could be to return the length etc, in this case in pixels.

    Remember a function must be defined in a sass/less file before it can
    be used. If the function is declared at line 10 and used at line 5, it
    will not work.
 */
@function divide($a, $b) {
    @return ($a / $b) * 1px; //need to multiply by 1px in order to convert units to pixels
}

.btn-main, .btn-hot {
    padding: 10px;
    display: inline-block;
    text-align: center;
    border-radius: divide(1000, 10);
    width: $width-button;

    @include style-link-text($color-text-light);
}

.btn-main {
    &:link {
        background-color: $color-secondary;
    }

    &:hover {
        //Example of using built-in sass functions such as darken
        //to create a 15%s darker color from our variable
        background-color: darken($color-secondary, 15%);
    }
}

.btn-hot {
    &:link {
        background-color: $color-tertiary;
    }

    &:hover {
        //Example of using built-in sass functions such as lighten
        //to create a 15% lighter color from our variable
        background-color: lighten($color-tertiary, 15%);
    }
}

/*
    Extends is a way of inheriting declarations to be reused.
    Extends are defined using '%' and below we have declared
    a 'btn-placeholder' extend.

    extends are different to mixins though they may appear the same.
    The difference is that in the compiled css code, a mixin will
    copy its contents into the selectors that use the mixin.
    However, the extends have opposite affect. For extends, the
    compiled css code substitutes the extend with the selector.

    In the extends case below, the css compiled code would be:
        .btn-main:after, .btn-main:before {
            padding: 10px;
            display: inline-block;
        }
     Notice both selectors that use the extend have taken the place
     of the extend.

     Important: Use extends only when sharing code amongst RELATED
     selectors/elements.
 */
%btn-placeholder {
    padding: 10px;
    display: inline-block;
}

.btn-main:after {
    //By using the 'btn-placeholder' extend this selector
    //inherits the declared properties defined in the extend
    //i.e. padding: 10px, display: inline-block
    @extend %btn-placeholder;
}

.btn-main:before {
    @extend %btn-placeholder;
}
